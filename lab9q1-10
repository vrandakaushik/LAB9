Q1 
ans: output will be:
*p3= S
*p3= T, p3 = 6940
*p1= S, p1 = 6940

Q2
ans: D. *p = 75;

Q3
ans: cannot convert ‘char*’ to ‘double*’ in initialization

Q4
ans:
blocks[0] = 'A'
*(blocks + 2) = 'C'
*(ptr + 1) = 'B'
*ptr = 'A'
blocks + 1 = 4435
*ptr = 'B'
*(ptr + 1) ='C'

blocks = 4434
*++ptr = 'B'
++*ptr = 'C'
*ptr++ = 'C'
 *ptr=  'C'

Q5
ans:
char s[10] = "abcde";
char* cptr;


int flage=0;
for(int i=9;i<=0;i--)
{
	if(flage)
	cout<<s[i];
	else
		if(s[i]=='\0')
			flage=1;
}

Q6
ans:

int countEven(int* arr,int size)
{
	int count=0;
	for(int i=0;i<size;i++)
	if(arr[i]%2==0)
	count++;
	
	return count;
}

Q7
ans:
double* maximum(double* a, int size)
{
	doubel p*=NULL;
	if(size==0)
	return p;
	p*=a[0];
	for(int i=0;i<size;i++)
	if(a[i]<p*)
	P*=a[i];
	return p;
}

Q8
ans:
int myStrLen(char ch*)
{	
	int count=0;
	while(ch*!='\0')
	{
		ch++;
		count++;
	}
	return count;
}

Q9
ans:

bool contains(char* str,char ch)
{	
	char *p=char;
	while(*p!='\0')
	{
		if(*p==ch)
		return 1;
	}
	
	return 0;
}

Q10
ans:
int main()
{
  char s[10] = "abcde";
  revString(s);  // call the function
  return 0;
}

void revtString(char* ptr)
{
	int count=0;
	while(ch*!='\0')
	{
		ch++;
		count++;
	}
	char p;
	for(int i=0;i<count/2;i++)
	{
		p=ptr[i];
		ptr[i]=ptr[count-1-i];
		ptr[count-1-i]=p;
	}
}
